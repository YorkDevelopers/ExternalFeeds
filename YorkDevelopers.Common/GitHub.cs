using System;
using System.Linq;
using Octokit;
using YorkDevelopers.Shared.Properties;

namespace YorkDevelopers.Shared
{
    public class GitHub
    {
        private const string OWNER = "YorkDevelopers";
        private const string REPRO = "yorkdevelopers.github.io";
        private const string BRANCH = "master";

        private readonly GitHubClient gitHubClient;
        public GitHub()
        {
            // Set up our credentials to access git hub
            this.gitHubClient = new GitHubClient(new ProductHeaderValue("yorkDevelopersFeed"));
            this.gitHubClient.Credentials = new Credentials(Settings.Default.GITHUB_TOKEN);
        }

        /// <summary>
        /// Creates/Updates the specified file on GitHub
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="contents"></param>
        public void WriteFileToGitHub(string filename, string contents)
        {
            try
            {
                // try to get the file (and with the file the last commit sha)
                var existingFile = gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH).Result;

                var updateChangeSet = gitHubClient.Repository.Content.UpdateFile(
                        OWNER,
                        REPRO,
                        filename,
                        new UpdateFileRequest("Latest Autogenerated file - " + System.DateTime.Now,
                                              contents,
                                              existingFile.First().Sha, BRANCH)).Result;
            }
            catch (AggregateException ae)
            {
                ae.Handle((x) =>
                {
                    if (x is Octokit.NotFoundException)
                    {
                        // if file is not found, create it
                        var createChangeSet = gitHubClient.Repository.Content.CreateFile(
                                            OWNER,
                                            REPRO,
                                            filename,
                                            new CreateFileRequest("First Autogenerated file - " + System.DateTime.Now,
                                                                  contents)).Result;
                        return true;
                    }
                    return false; // Let anything else stop the application.
                });

            }
        }

        /// <summary>
        /// Reads the contents of an existing file on github.  Returns "" if the file 
        /// does not currently exist.
        /// </summary>
        /// <param name="filename">For example _data/Events.yml</param>
        /// <returns></returns>
        public string ReadFileFromGitHub(string filename)
        {
            try
            {
                // try to get the file (and with the file the last commit sha)
                var existingFile = gitHubClient.Repository.Content.GetAllContentsByRef(OWNER, REPRO, filename, BRANCH).Result;
                return existingFile.First().Content;
            }
            catch (AggregateException ae)
            {
                ae.Handle((x) =>
                {
                    if (x is Octokit.NotFoundException)
                    {
                        return true;
                    }
                    return false; // Let anything else stop the application.
                });

            }

            return "";
        }

    }
}
